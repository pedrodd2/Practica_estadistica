install.packages(c("tidyverse","rmarkdown","nasapower", "zoo", "caret"))
library("tidyverse")
q()
saboresDePlatos
# instalación
#install.packages(c('ggplot2'), repos='https://cran.rstudio.com/')
# instalación
#install.packages(c('ggplot2'), repos='https://cran.rstudio.com/')
library("ggplot2")
options(repr.plot.height=6,repr.plot.width=8 , repr.plot.res = 200)
#ggplot crea un objeto para representar gráficos
#geom_line crea una linea sobre el objeto ggplot
#geom_point muestra los puntos sobre el objeto ggplot
#El objeto aes, indica que columnas vamos a usar para las coordenadas X e Y
ggplot(data=mydf, aes(x=dfx, y=dfy))+geom_line(color="blue")+geom_point(color="red")
# instalación
#install.packages(c('ggplot2'), repos='https://cran.rstudio.com/')
library("ggplot2")
valX <- seq(-5, 5, by=0.5)
valY <- valX+valX^2+valX^3
mydf <- data.frame(dfx=valX, dfy=valY)
head(mydf)
#ggplot crea un objeto para representar gráficos
#geom_line crea una linea sobre el objeto ggplot
#geom_point muestra los puntos sobre el objeto ggplot
#El objeto aes, indica que columnas vamos a usar para las coordenadas X e Y
ggplot(data=mydf, aes(x=dfx, y=dfy))+geom_line(color='#FABADA', size=10)+geom_point(color='red')
mydf$type <- "función 1"
mydf2 <- data.frame(dfx=valX, dfy=1+2*valX+3*valX^2, type="función 2")
mydf2 <- rbind(mydf, mydf2)
mydf2$type <- as.factor(mydf2$type)
head(mydf2)
mydf2[sort(sample(1:nrow(mydf2), 5)),]
summary(mydf2)
g <- ggplot(data=mydf2,aes(x=dfx,y=dfy,color=type))
summary(g)
g<-g+geom_line()+geom_point()
summary(g)
g
summary(iris)
iris[sample(1:nrow(iris),5),]
ggplot(data=iris,aes(x=Species, y=Sepal.Length,color=Species))+geom_boxplot()+scale_color_discrete(name="Longitud")
poblacion_raw<-read.csv("data/9663bsc.csv",skip=0,fileEncoding="ISO-8859-1",header=T, sep=';',stringsAsFactor=F)
head(poblacion_raw,7)
library(tidyverse)
poblacion <- poblacion_raw |>
mutate(Total=as.numeric(gsub('\\.','',Total))) |>
pivot_wider(names_from = Sexo, values_from = Total)  |>
mutate(edad=as.numeric(gsub("año(s|)","",Edad.simple))) |> drop_na() |> select(-c(Periodo,Edad.simple)) |>
rename(Total='Ambos sexos') |> arrange(edad)
#arrange(desc(Edad))
head(poblacion)
ggplot(data=poblacion, aes(x=edad, y=Total))+geom_col()+
geom_vline(xintercept = 45, color="blue")+
geom_vline(xintercept = 67, color="red")+
geom_vline(xintercept = 82, color="green")+
scale_y_continuous(breaks = seq(0,8e6,by=1e5), labels = format(seq(0,8e6,by=1e5)))+
ylab('Población total')
ggplot(data=poblacion, aes(x=edad))+
geom_col(aes(y=Hombres),fill="blue")+
geom_col(aes(y= -Mujeres),fill="red")+
scale_y_continuous(breaks=seq(-5e5,5e5,length.out=11), labels=abs(seq(-5e5,5e5,length.out=11)))+
xlab("Edad")+ylab("Mujeres           Hombres")+ggtitle("Pirámide poblacional de España")+
coord_flip()
print(paste("El dataset iris tiene",nrow(iris),"filas"))
head(iris)
sort(iris$Sepal.Length)
strava = read.csv("data/activities_strava.csv")
head(strava)
str(strava)
strava<-strava[c("Activity.Date","Activity.Name","Activity.Type","Elapsed.Time","Distance","Moving.Time")]
head(strava)
summary(strava)
library(ggplot2)
airbnb<-read.csv('data//airbnb.csv',sep = ',', stringsAsFactors = T)
airbnb[1:6,]
colnames(airbnb)<-c("CodigoPostal","Barrio","TipoPropiedad","TipoAlquiler","MaxOcupantes","NumBanyos",
"NumDormitorios","NumCamas","TipoCama","Comodidades","PiesCuadrados","Precio","Puntuacion")
airbnb$MetrosCuadrados <- airbnb$PiesCuadrados*0.092903
#limpieza_1 `` '-' y '28' son NA
limpieza_1 <- which((airbnb$CodigoPostal %in% c('','-','28')) )
airbnb[limpieza_1,'CodigoPostal'] <- NA
#limpieza 2 NA todos los que no compiencen por 28
limpieza_2 <- which(!(substring(airbnb$CodigoPostal,1,2) == '28') )
airbnb[limpieza_2,'CodigoPostal'] <- NA
#limpieza 3 todo lo contenga 28002 debe ser solo 28002
limpieza_3 <- which(grepl('28002',airbnb$CodigoPostal))
airbnb[limpieza_3,'CodigoPostal'] <- '28002'
#limpieza 4 todo lo contenga 28004 debe ser solo 28004
limpieza_4 <- which(grepl('28004',airbnb$CodigoPostal))
airbnb[limpieza_4,'CodigoPostal'] <- '28004'
#limpieza 5 todo lo contenga 28051 debe ser solo 28051
limpieza_5 <- which(grepl('28051',airbnb$CodigoPostal))
airbnb[limpieza_5,'CodigoPostal'] <- '28051'
#limpieza 6 El codigo 2804 debería ser 28004
limpieza_6 <- which(airbnb$CodigoPostal == '2804')
airbnb[limpieza_6,'CodigoPostal'] <- '28004'
#limpieza 7  El codigo 2805 debería ser 28005
limpieza_7 <- which(airbnb$CodigoPostal == '2805')
airbnb[limpieza_7,'CodigoPostal'] <- '28005'
#limpieza 8 El codigo 2815 debería ser 28015
limpieza_8 <- which(airbnb$CodigoPostal == '2815')
airbnb[limpieza_8,'CodigoPostal'] <- '28015'
#limpieza 9 Esta limpieza es adicional ya que se ha observado que existe el codigo 280013 que
#deberia de ser el 28013
limpieza_9 <- which(airbnb$CodigoPostal == '280013')
airbnb[limpieza_9,'CodigoPostal'] <- '28013'
tabla_cp <- table(droplevels(airbnb$CodigoPostal))
tabla_cp
# top 5 codigos postales y sus numeros de entradas
top_5_cp <- sort(tabla_cp, decreasing = TRUE)[1:5]
paste("Top 5 codigos postales y sus numeros de entradas")
top_5_cp
# bottom 5 codigos postales y sus numeros de entradas
bottom_5_cp <- sort(tabla_cp, decreasing = FALSE)[1:5]
paste("Bottom 5 codigos postales y sus numeros de entradas")
bottom_5_cp
cp_28012 <- which(airbnb$CodigoPostal == '28012')
tabla_cp_28012 <- table(droplevels(airbnb[cp_28012,'Barrio']))
tabla_cp_28012
tabla_barrios <- table(droplevels(airbnb$Barrio))
paste("Numero de barrios en el dataset:")
nrow(tabla_barrios)
paste("Cuales son los barrios:")
tabla_barrios
# top 5 codigos postales y sus numeros de entradas
top_5_barrios <- sort(tabla_barrios, decreasing = TRUE)[1:5]
paste("Top 5 barrios y sus numeros de entradas")
top_5_barrios
tabla_tipos_alquiler <- table(droplevels(airbnb$TipoAlquiler))
paste("Numero de tipos de alquiler en el dataset:")
nrow(tabla_tipos_alquiler)
paste("Cuales son los Tipos de barrio y cuantas entradas tienen:")
tabla_tipos_alquiler
ggplot(data=airbnb,aes(x=TipoAlquiler, y=Precio,color=TipoAlquiler))+geom_boxplot()+scale_color_discrete(name="Precio")
paste("Precio medio segun el tipo de alquiler:")
aggregate(Precio ~ TipoAlquiler, data = airbnb, FUN = mean)
paste("la diferencia que hay ¿es estadísticamente significativa? ¿Con que test lo comprobarías?: Para ello primero tenemos que ver si los grupos siguen una distribucion gaussiana para ello vamos a realizar el test saphiro a cada una de los grupos:")
for (v in levels(airbnb$TipoAlquiler)){
datos <- airbnb$Precio[airbnb$TipoAlquiler==v]
if(length(datos) > 5000){
datos <- sample(datos, 5000)
}
print(paste("Tipo de alquiler:", v," pvalue:", shapiro.test(datos)$p.value))
}
paste("al ser todos los pvalue menores que 0.05 podemos rechazar la hipotesis nula, es decir las distribuciones no son normales ")
paste("Como los datos no siguen una distribucion normal utilizamos el test kruskal-Wallis ")
kruskal.test(Precio ~ TipoAlquiler, data = airbnb)
paste("Como el pvalue es muy pequeno podemos indicar que hay diferencias significaticas en las medianas entre al menos uno de los grupos ")
airbnb_entire <- airbnb[which(airbnb$TipoAlquiler == 'Entire home/apt'),]
tabla_barrios_ent <- table(droplevels(airbnb_entire$Barrio))
top_5_barrios_ent <- sort(tabla_barrios_ent, decreasing = TRUE)[1:5]
paste("Top 5 barrios con mayor numero de apartamentos enteros en alquiler")
top_5_barrios_ent
precio_barrio <- aggregate(Precio ~ Barrio, data = airbnb_entire, FUN = mean)
top_5_precio_barrio <- head(precio_barrio[order(-precio_barrio$Precio),], 5)
paste("Top 5 barrios con mayor precio medio de alquiler para apartamentos enteros en alquiler")
top_5_precio_barrio
subset(tabla_barrios_ent, names(tabla_barrios_ent) %in% top_5_precio_barrio$Barrio)
df_barrios_ent <- as.data.frame(tabla_barrios_ent)
names(df_barrios_ent) <- c("Barrio", "Num_Entradas")
Barrio_ent_precio <- merge(df_barrios_ent, precio_barrio, by = "Barrio")
Barrio_ent_precio
autos<-read.csv("./data//imports-85.data", col.names = c("risk", "normalized_losses",
"make", "fuel_type", "aspiration",
"num_doors", "body_style", "drive_wheels", "engine_location",
"wheel_base", "length", "width", "height", "curb_weight",
"engine_type", "num_cylinders", "engine_size", "fuel_system",
"bore", "stroke", "compression_ratio", "horsepower", "peak_rpm",
"city_mpg", "highway_mpg", "price"))
library("ggplot2")
ggplot(data=autos, aes(x=length, y=width, size=height))+
geom_point(alpha=0.1)+
scale_size_continuous(name="Altura")+
xlab("Longitud del coche")+
ylab("Ancho del coche")
ggplot(data=autos, aes(x=body_style, y=length, color=body_style))+geom_boxplot()
unique(autos$body_style)
library("dslabs")
data(stars)
head(stars)
ggplot(stars, aes(x=temp, y=magnitude, color=temp))+
geom_point()+
scale_color_gradientn(colors = rainbow(5, rev=FALSE))+
theme_bw()+
scale_x_reverse()+scale_y_reverse()+scale_x_log10()+
ggtitle("Diagrama HR")
covid_url<-'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv'
df<-read.csv(url(covid_url))
head(df)
df$Lat<-NULL
df$Long<-NULL
head(df)
library(reshape2)
df_cov<-melt(df,id.vars=c("Province.State","Country.Region"))
tail(df_cov)
dim(df_cov)
df_cov$fecha<-as.POSIXct(df_cov$variable, format='X%m.%d.%y')
head(df_cov)
df_country<-df_cov[df_cov$Country.Region=="Spain" | df_cov$Country.Region=="Italy",]
tail(df_country)
ggplot(df_country, aes(x=fecha, y=value))+
geom_line(aes(color=Country.Region), size=2)+ylab("Número de casos")
setwd("~/keepcoding/estadistica/Practica_estadistica")
library(ggplot2)
airbnb<-read.csv('data//airbnb.csv',sep = ',', stringsAsFactors = T)
airbnb[1:6,]
colnames(airbnb)<-c("CodigoPostal","Barrio","TipoPropiedad","TipoAlquiler","MaxOcupantes","NumBanyos",
"NumDormitorios","NumCamas","TipoCama","Comodidades","PiesCuadrados","Precio","Puntuacion")
airbnb$MetrosCuadrados <- airbnb$PiesCuadrados*0.092903
#limpieza_1 `` '-' y '28' son NA
limpieza_1 <- which((airbnb$CodigoPostal %in% c('','-','28')) )
airbnb[limpieza_1,'CodigoPostal'] <- NA
#limpieza 2 NA todos los que no compiencen por 28
limpieza_2 <- which(!(substring(airbnb$CodigoPostal,1,2) == '28') )
airbnb[limpieza_2,'CodigoPostal'] <- NA
#limpieza 3 todo lo contenga 28002 debe ser solo 28002
limpieza_3 <- which(grepl('28002',airbnb$CodigoPostal))
airbnb[limpieza_3,'CodigoPostal'] <- '28002'
#limpieza 4 todo lo contenga 28004 debe ser solo 28004
limpieza_4 <- which(grepl('28004',airbnb$CodigoPostal))
airbnb[limpieza_4,'CodigoPostal'] <- '28004'
#limpieza 5 todo lo contenga 28051 debe ser solo 28051
limpieza_5 <- which(grepl('28051',airbnb$CodigoPostal))
airbnb[limpieza_5,'CodigoPostal'] <- '28051'
#limpieza 6 El codigo 2804 debería ser 28004
limpieza_6 <- which(airbnb$CodigoPostal == '2804')
airbnb[limpieza_6,'CodigoPostal'] <- '28004'
#limpieza 7  El codigo 2805 debería ser 28005
limpieza_7 <- which(airbnb$CodigoPostal == '2805')
airbnb[limpieza_7,'CodigoPostal'] <- '28005'
#limpieza 8 El codigo 2815 debería ser 28015
limpieza_8 <- which(airbnb$CodigoPostal == '2815')
airbnb[limpieza_8,'CodigoPostal'] <- '28015'
#limpieza 9 Esta limpieza es adicional ya que se ha observado que existe el codigo 280013 que
#deberia de ser el 28013
limpieza_9 <- which(airbnb$CodigoPostal == '280013')
airbnb[limpieza_9,'CodigoPostal'] <- '28013'
tabla_cp <- table(droplevels(airbnb$CodigoPostal))
tabla_cp
# top 5 codigos postales y sus numeros de entradas
top_5_cp <- sort(tabla_cp, decreasing = TRUE)[1:5]
paste("Top 5 codigos postales y sus numeros de entradas")
top_5_cp
# bottom 5 codigos postales y sus numeros de entradas
bottom_5_cp <- sort(tabla_cp, decreasing = FALSE)[1:5]
paste("Bottom 5 codigos postales y sus numeros de entradas")
bottom_5_cp
cp_28012 <- which(airbnb$CodigoPostal == '28012')
tabla_cp_28012 <- table(droplevels(airbnb[cp_28012,'Barrio']))
tabla_cp_28012
tabla_barrios <- table(droplevels(airbnb$Barrio))
paste("Numero de barrios en el dataset:")
nrow(tabla_barrios)
paste("Cuales son los barrios:")
tabla_barrios
# top 5 codigos postales y sus numeros de entradas
top_5_barrios <- sort(tabla_barrios, decreasing = TRUE)[1:5]
paste("Top 5 barrios y sus numeros de entradas")
top_5_barrios
tabla_tipos_alquiler <- table(droplevels(airbnb$TipoAlquiler))
paste("Numero de tipos de alquiler en el dataset:")
nrow(tabla_tipos_alquiler)
paste("Cuales son los Tipos de barrio y cuantas entradas tienen:")
tabla_tipos_alquiler
ggplot(data=airbnb,aes(x=TipoAlquiler, y=Precio,color=TipoAlquiler))+geom_boxplot()+scale_color_discrete(name="Precio")
paste("Precio medio segun el tipo de alquiler:")
aggregate(Precio ~ TipoAlquiler, data = airbnb, FUN = mean)
paste("la diferencia que hay ¿es estadísticamente significativa? ¿Con que test lo comprobarías?: Para ello primero tenemos que ver si los grupos siguen una distribucion gaussiana para ello vamos a realizar el test saphiro a cada una de los grupos:")
for (v in levels(airbnb$TipoAlquiler)){
datos <- airbnb$Precio[airbnb$TipoAlquiler==v]
if(length(datos) > 5000){
datos <- sample(datos, 5000)
}
print(paste("Tipo de alquiler:", v," pvalue:", shapiro.test(datos)$p.value))
}
paste("al ser todos los pvalue menores que 0.05 podemos rechazar la hipotesis nula, es decir las distribuciones no son normales ")
paste("Como los datos no siguen una distribucion normal utilizamos el test kruskal-Wallis ")
kruskal.test(Precio ~ TipoAlquiler, data = airbnb)
paste("Como el pvalue es muy pequeno podemos indicar que hay diferencias significaticas en las medianas entre al menos uno de los grupos ")
airbnb_entire <- airbnb[which(airbnb$TipoAlquiler == 'Entire home/apt'),]
tabla_barrios_ent <- table(droplevels(airbnb_entire$Barrio))
top_5_barrios_ent <- sort(tabla_barrios_ent, decreasing = TRUE)[1:5]
paste("Top 5 barrios con mayor numero de apartamentos enteros en alquiler")
top_5_barrios_ent
precio_barrio <- aggregate(Precio ~ Barrio, data = airbnb_entire, FUN = mean)
top_5_precio_barrio <- head(precio_barrio[order(-precio_barrio$Precio),], 5)
paste("Top 5 barrios con mayor precio medio de alquiler para apartamentos enteros en alquiler")
top_5_precio_barrio
subset(tabla_barrios_ent, names(tabla_barrios_ent) %in% top_5_precio_barrio$Barrio)
df_barrios_ent <- as.data.frame(tabla_barrios_ent)
names(df_barrios_ent) <- c("Barrio", "Num_Entradas")
Barrio_ent_precio <- merge(df_barrios_ent, precio_barrio, by = "Barrio")
Barrio_ent_precio
#Filtramos los barrios con mas de 100 entradas
Barrio_100ent_precio <- subset(Barrio_ent_precio, Num_Entradas > 100)
top_5_Barrio_100ent_precio <- head(Barrio_100ent_precio[order(-Barrio_100ent_precio$Precio),], 5)
paste("Top 5 barrios con mayor precio medio de alquiler para apartamentos con mas de 100 entradas")
top_5_Barrio_100ent_precio
for (v in droplevels(top_5_Barrio_100ent_precio$Barrio)){
filtro_barrio <- subset(airbnb_entire, Barrio == v)
print(ggplot(data=filtro_barrio) + aes(x = Precio) + geom_density() + labs(title = v ))
}
#Aniadimos nueva columna
top_5_Barrio_100ent_precio$MetrosCuadrados <- NA
for (v in droplevels(top_5_Barrio_100ent_precio$Barrio)){
filtro_barrio <- subset(airbnb_entire, Barrio == v)
m2_barrio <- aggregate(MetrosCuadrados ~ Barrio, data = filtro_barrio, FUN = mean)
top_5_Barrio_100ent_precio$MetrosCuadrados[v] <- m2_barrio
#top_5_precio_barrio <- head(precio_barrio[order(-precio_barrio$Precio),], 5)
}
#Aniadimos nueva columna
top_5_Barrio_100ent_precio$MetrosCuadrados <- NA
for (v in droplevels(top_5_Barrio_100ent_precio$Barrio)){
filtro_barrio <- subset(airbnb_entire, Barrio == v)
m2_barrio <- aggregate(MetrosCuadrados ~ Barrio, data = filtro_barrio, FUN = mean)
#top_5_Barrio_100ent_precio$MetrosCuadrados[v] <- m2_barrio
#top_5_precio_barrio <- head(precio_barrio[order(-precio_barrio$Precio),], 5)
}
paste("Top 5 barrios con mayor precio medio de alquiler para apartamentos enteros en alquiler")
top_5_Barrio_100ent_precio
#Aniadimos nueva columna
top_5_Barrio_100ent_precio$MetrosCuadrados <- NA
for (v in droplevels(top_5_Barrio_100ent_precio$Barrio)){
filtro_barrio <- subset(airbnb_entire, Barrio == v)
m2_barrio <- aggregate(MetrosCuadrados ~ Barrio, data = filtro_barrio, FUN = mean)
top_5_Barrio_100ent_precio$MetrosCuadrados[v] <- m2_barrio$MetrosCuadrados[v]
#top_5_precio_barrio <- head(precio_barrio[order(-precio_barrio$Precio),], 5)
}
#Aniadimos nueva columna
top_5_Barrio_100ent_precio$MetrosCuadrados <- NA
for (v in droplevels(top_5_Barrio_100ent_precio$Barrio)){
filtro_barrio <- subset(airbnb_entire, Barrio == v)
m2_barrio <- aggregate(MetrosCuadrados ~ Barrio, data = filtro_barrio, FUN = mean)
print(m2_barrio$MetrosCuadrados[v])
#top_5_Barrio_100ent_precio$MetrosCuadrados[v] <- m2_barrio$MetrosCuadrados[v]
#top_5_precio_barrio <- head(precio_barrio[order(-precio_barrio$Precio),], 5)
}
paste("Top 5 barrios con mayor precio medio de alquiler para apartamentos enteros en alquiler")
top_5_Barrio_100ent_precio
#Aniadimos nueva columna
top_5_Barrio_100ent_precio$MetrosCuadrados <- NA
for (v in droplevels(top_5_Barrio_100ent_precio$Barrio)){
filtro_barrio <- subset(airbnb_entire, Barrio == v)
m2_barrio <- aggregate(MetrosCuadrados ~ Barrio, data = filtro_barrio, FUN = mean)
print(m2_barrio$MetrosCuadrados)
#top_5_Barrio_100ent_precio$MetrosCuadrados[v] <- m2_barrio$MetrosCuadrados[v]
#top_5_precio_barrio <- head(precio_barrio[order(-precio_barrio$Precio),], 5)
}
paste("Top 5 barrios con mayor precio medio de alquiler para apartamentos enteros en alquiler")
top_5_Barrio_100ent_precio
#Aniadimos nueva columna
top_5_Barrio_100ent_precio$MetrosCuadrados <- NA
for (v in droplevels(top_5_Barrio_100ent_precio$Barrio)){
filtro_barrio <- subset(airbnb_entire, Barrio == v)
m2_barrio <- aggregate(MetrosCuadrados ~ Barrio, data = filtro_barrio, FUN = mean)
#print(m2_barrio$MetrosCuadrados)
top_5_Barrio_100ent_precio$MetrosCuadrados[v] <- m2_barrio$MetrosCuadrados
#top_5_precio_barrio <- head(precio_barrio[order(-precio_barrio$Precio),], 5)
}
#Aniadimos nueva columna
top_5_Barrio_100ent_precio$MetrosCuadrados <- NA
for (v in droplevels(top_5_Barrio_100ent_precio$Barrio)){
filtro_barrio <- subset(airbnb_entire, Barrio == v)
m2_barrio <- aggregate(MetrosCuadrados ~ Barrio, data = filtro_barrio, FUN = mean)
print(top_5_Barrio_100ent_precio$MetrosCuadrados[v])
#top_5_Barrio_100ent_precio$MetrosCuadrados[v] <- m2_barrio$MetrosCuadrados
#top_5_precio_barrio <- head(precio_barrio[order(-precio_barrio$Precio),], 5)
}
paste("Top 5 barrios con mayor precio medio de alquiler para apartamentos enteros en alquiler")
top_5_Barrio_100ent_precio
library(ggplot2)
airbnb<-read.csv('data//airbnb.csv',sep = ',', stringsAsFactors = T)
airbnb[1:6,]
colnames(airbnb)<-c("CodigoPostal","Barrio","TipoPropiedad","TipoAlquiler","MaxOcupantes","NumBanyos",
"NumDormitorios","NumCamas","TipoCama","Comodidades","PiesCuadrados","Precio","Puntuacion")
airbnb$MetrosCuadrados <- airbnb$PiesCuadrados*0.092903
#limpieza_1 `` '-' y '28' son NA
limpieza_1 <- which((airbnb$CodigoPostal %in% c('','-','28')) )
airbnb[limpieza_1,'CodigoPostal'] <- NA
#limpieza 2 NA todos los que no compiencen por 28
limpieza_2 <- which(!(substring(airbnb$CodigoPostal,1,2) == '28') )
airbnb[limpieza_2,'CodigoPostal'] <- NA
#limpieza 3 todo lo contenga 28002 debe ser solo 28002
limpieza_3 <- which(grepl('28002',airbnb$CodigoPostal))
airbnb[limpieza_3,'CodigoPostal'] <- '28002'
#limpieza 4 todo lo contenga 28004 debe ser solo 28004
limpieza_4 <- which(grepl('28004',airbnb$CodigoPostal))
airbnb[limpieza_4,'CodigoPostal'] <- '28004'
#limpieza 5 todo lo contenga 28051 debe ser solo 28051
limpieza_5 <- which(grepl('28051',airbnb$CodigoPostal))
airbnb[limpieza_5,'CodigoPostal'] <- '28051'
#limpieza 6 El codigo 2804 debería ser 28004
limpieza_6 <- which(airbnb$CodigoPostal == '2804')
airbnb[limpieza_6,'CodigoPostal'] <- '28004'
#limpieza 7  El codigo 2805 debería ser 28005
limpieza_7 <- which(airbnb$CodigoPostal == '2805')
airbnb[limpieza_7,'CodigoPostal'] <- '28005'
#limpieza 8 El codigo 2815 debería ser 28015
limpieza_8 <- which(airbnb$CodigoPostal == '2815')
airbnb[limpieza_8,'CodigoPostal'] <- '28015'
#limpieza 9 Esta limpieza es adicional ya que se ha observado que existe el codigo 280013 que
#deberia de ser el 28013
limpieza_9 <- which(airbnb$CodigoPostal == '280013')
airbnb[limpieza_9,'CodigoPostal'] <- '28013'
tabla_cp <- table(droplevels(airbnb$CodigoPostal))
tabla_cp
# top 5 codigos postales y sus numeros de entradas
top_5_cp <- sort(tabla_cp, decreasing = TRUE)[1:5]
paste("Top 5 codigos postales y sus numeros de entradas")
top_5_cp
# bottom 5 codigos postales y sus numeros de entradas
bottom_5_cp <- sort(tabla_cp, decreasing = FALSE)[1:5]
paste("Bottom 5 codigos postales y sus numeros de entradas")
bottom_5_cp
cp_28012 <- which(airbnb$CodigoPostal == '28012')
tabla_cp_28012 <- table(droplevels(airbnb[cp_28012,'Barrio']))
tabla_cp_28012
tabla_barrios <- table(droplevels(airbnb$Barrio))
paste("Numero de barrios en el dataset:")
nrow(tabla_barrios)
paste("Cuales son los barrios:")
tabla_barrios
# top 5 codigos postales y sus numeros de entradas
top_5_barrios <- sort(tabla_barrios, decreasing = TRUE)[1:5]
paste("Top 5 barrios y sus numeros de entradas")
top_5_barrios
tabla_tipos_alquiler <- table(droplevels(airbnb$TipoAlquiler))
paste("Numero de tipos de alquiler en el dataset:")
nrow(tabla_tipos_alquiler)
paste("Cuales son los Tipos de barrio y cuantas entradas tienen:")
tabla_tipos_alquiler
ggplot(data=airbnb,aes(x=TipoAlquiler, y=Precio,color=TipoAlquiler))+geom_boxplot()+scale_color_discrete(name="Precio")
paste("Precio medio segun el tipo de alquiler:")
aggregate(Precio ~ TipoAlquiler, data = airbnb, FUN = mean)
paste("la diferencia que hay ¿es estadísticamente significativa? ¿Con que test lo comprobarías?: Para ello primero tenemos que ver si los grupos siguen una distribucion gaussiana para ello vamos a realizar el test saphiro a cada una de los grupos:")
for (v in levels(airbnb$TipoAlquiler)){
datos <- airbnb$Precio[airbnb$TipoAlquiler==v]
if(length(datos) > 5000){
datos <- sample(datos, 5000)
}
print(paste("Tipo de alquiler:", v," pvalue:", shapiro.test(datos)$p.value))
}
paste("al ser todos los pvalue menores que 0.05 podemos rechazar la hipotesis nula, es decir las distribuciones no son normales ")
paste("Como los datos no siguen una distribucion normal utilizamos el test kruskal-Wallis ")
kruskal.test(Precio ~ TipoAlquiler, data = airbnb)
paste("Como el pvalue es muy pequeno podemos indicar que hay diferencias significaticas en las medianas entre al menos uno de los grupos ")
airbnb_entire <- airbnb[which(airbnb$TipoAlquiler == 'Entire home/apt'),]
tabla_barrios_ent <- table(droplevels(airbnb_entire$Barrio))
top_5_barrios_ent <- sort(tabla_barrios_ent, decreasing = TRUE)[1:5]
paste("Top 5 barrios con mayor numero de apartamentos enteros en alquiler")
top_5_barrios_ent
precio_barrio <- aggregate(Precio ~ Barrio, data = airbnb_entire, FUN = mean)
top_5_precio_barrio <- head(precio_barrio[order(-precio_barrio$Precio),], 5)
paste("Top 5 barrios con mayor precio medio de alquiler para apartamentos enteros en alquiler")
top_5_precio_barrio
subset(tabla_barrios_ent, names(tabla_barrios_ent) %in% top_5_precio_barrio$Barrio)
df_barrios_ent <- as.data.frame(tabla_barrios_ent)
names(df_barrios_ent) <- c("Barrio", "Num_Entradas")
Barrio_ent_precio <- merge(df_barrios_ent, precio_barrio, by = "Barrio")
Barrio_ent_precio
#Filtramos los barrios con mas de 100 entradas
Barrio_100ent_precio <- subset(Barrio_ent_precio, Num_Entradas > 100)
top_5_Barrio_100ent_precio <- head(Barrio_100ent_precio[order(-Barrio_100ent_precio$Precio),], 5)
paste("Top 5 barrios con mayor precio medio de alquiler para apartamentos con mas de 100 entradas")
top_5_Barrio_100ent_precio
for (v in droplevels(top_5_Barrio_100ent_precio$Barrio)){
filtro_barrio <- subset(airbnb_entire, Barrio == v)
print(ggplot(data=filtro_barrio) + aes(x = Precio) + geom_density() + labs(title = v ))
}
#Aniadimos nueva columna
top_5_Barrio_100ent_precio$MetrosCuadrados <- NA
for (v in droplevels(top_5_Barrio_100ent_precio$Barrio)){
filtro_barrio <- subset(airbnb_entire, Barrio == v)
m2_barrio <- aggregate(MetrosCuadrados ~ Barrio, data = filtro_barrio, FUN = mean)
top_5_Barrio_100ent_precio$MetrosCuadrados[v] <- m2_barrio$MetrosCuadrados
}
#Aniadimos nueva columna
top_5_Barrio_100ent_precio$MetrosCuadrados <- NA
for (v in droplevels(top_5_Barrio_100ent_precio$Barrio)){
filtro_barrio <- subset(airbnb_entire, Barrio == v)
m2_barrio <- aggregate(MetrosCuadrados ~ Barrio, data = filtro_barrio, FUN = mean)
top_5_Barrio_100ent_precio$MetrosCuadrados[top_5_Barrio_100ent_precio$Barrio == v] <- m2_barrio$MetrosCuadrados
}
paste("Top 5 barrios con mayor precio medio de alquiler para apartamentos enteros en alquiler")
top_5_Barrio_100ent_precio
for (v in droplevels(top_5_Barrio_100ent_precio$Barrio)){
filtro_barrio <- subset(airbnb_entire, Barrio == v)
print(ggplot(data=filtro_barrio) + aes(x = MetrosCuadrados) + geom_density() + labs(title = v ))
}
#primero comprobamos si la varianza son iguales para ello usamos el test de Barlett
#creamos un dataset solo con los barrios que nos interesan
airbnv_entire_top5 <- subset(airbnb_entire, Barrio %in% droplevels(top_5_Barrio_100ent_precio$Barrio))
airbnv_entire_top5
#primero comprobamos si la varianza son iguales para ello usamos el test de Barlett
#creamos un dataset solo con los barrios que nos interesan
airbnv_entire_top5 <- subset(airbnb_entire, Barrio %in% droplevels(top_5_Barrio_100ent_precio$Barrio))
tabla_barrios2 <- table(droplevels(airbnv_entire_top5$Barrio))
tabla_barrios2
#primero comprobamos si la varianza son iguales para ello usamos el test de Barlett
#creamos un dataset solo con los barrios que nos interesan
airbnv_entire_top5 <- subset(airbnb_entire, Barrio %in% droplevels(top_5_Barrio_100ent_precio$Barrio))
#realizamos el test de Barlett
bartlett.test(MetrosCuadrados~Barrio, data=airbnv_entire_top5)
#creamos un dataset solo con los barrios que nos interesan
airbnv_entire_top5 <- subset(airbnb_entire, Barrio %in% droplevels(top_5_Barrio_100ent_precio$Barrio))
#realizamos el test de kruskal-wallis
kruskal.test(MetrosCuadrados~Barrio, data=airbnv_entire_top5)
